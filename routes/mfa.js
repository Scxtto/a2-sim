const express = require("express");
const router = express.Router();
const qrcode = require("qrcode");
const {
  CognitoIdentityProviderClient,
  AssociateSoftwareTokenCommand,
  VerifySoftwareTokenCommand,
} = require("@aws-sdk/client-cognito-identity-provider");

const client = new CognitoIdentityProviderClient({ region: "ap-southeast-2" });

// MFA Setup: /mfa/setup
router.post("/setup", async (req, res) => {
  const { session } = req.body; // Use session from the challenge response
  console.log("Initiating MFA setup with session: ", session);

  try {
    const command = new AssociateSoftwareTokenCommand({
      Session: session, // Use session here, not accessToken
    });

    const response = await client.send(command);
    const secretCode = response.SecretCode;
    console.log("beep boop");
    console.log(secretCode);
    console.log("boop beep");
    const issuer = "Spaghetti Sim"; // Replace with your app's name
    const otpauthURI = `otpauth://totp/${issuer}?secret=${secretCode}&issuer=${issuer}&digits=6&period=30`;

    const qrCodeImageUrl = await qrcode.toDataURL(otpauthURI);

    // Send the secret code (to be scanned by the user into their authenticator app)
    res.status(200).json({
      qrCodeImageUrl,
      secretCode, // This is the code the user will scan
      session: response.Session, // Keep the session for next steps
    });
  } catch (err) {
    console.error("Error initiating MFA setup:", err);
    res.status(500).json({ message: "Error initiating MFA setup", error: err });
  }
});

router.post("/verify", async (req, res) => {
  const { session, mfaCode } = req.body; // Use session and MFA code

  console.log("Verifying MFA setup with code: ", mfaCode);
  console.log("Using session: ", session);
  console.log("Request body: ", req.body);

  try {
    const command = new VerifySoftwareTokenCommand({
      Session: session, // Use session here, not accessToken
      UserCode: mfaCode, // The MFA code generated by the user's authenticator app
    });

    const response = await client.send(command);
    console.log("MFA verification response: ", response);

    // Check if the verification was successful
    if (response.Status === "SUCCESS") {
      res.status(200).json({
        message: "MFA setup successful",
        session: response.Session, // Return the session for the next step
      });
    } else {
      res.status(400).json({ message: "Failed to verify MFA code" });
    }
  } catch (err) {
    console.error("Error verifying MFA setup:", err);
    res.status(500).json({ message: "Error verifying MFA setup", error: err });
  }
});

module.exports = router;
